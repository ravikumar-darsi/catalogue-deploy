pipeline {
    agent {
        node {
            label 'AGENT-1' // Specifies the node with label 'AGENT-1' to run the pipeline on
        }
    }
    options {
        ansiColor('xterm')
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }

    parameters {
        string(name: 'version', defaultValue: '1.2.0', description: 'What is the artifact version?')
        string(name: 'environment', defaultValue: 'dev', description: 'Which environment is this?')
        booleanParam(name: 'autoDestroy', defaultValue: false, description: 'Do you want to auto-destroy after 30 minutes?')
    }

    stages {
        stage('Print current version') {
            steps {
                sh """
                echo "version: ${params.version}"
                echo "environment: ${params.environment}"
                """
            }
        }
        stage('Init') {
            steps {
                sh """
                    cd terraform
                    terraform init --backend-config=${params.environment}/backend.tf -reconfigure
                """
            }
        }
        stage('Plan') {
            steps {
                sh """
                    cd terraform
                    terraform plan -var-file=${params.environment}/${params.environment}.tfvars -var="app_version=${params.version}"
                """
            }
        }
        stage('Apply') {
            steps {
                sh """
                    cd terraform
                    terraform apply -var-file=${params.environment}/${params.environment}.tfvars -var="app_version=${params.version}" -auto-approve
                """
            }
        }
        stage('Wait for Auto Destroy') {
            when {
                expression {
                    return params.autoDestroy
                }
            }
            steps {
                script {
                    echo "Waiting for 30 minutes before destroy..."
                    sleep(time: 2, unit: 'MINUTES') // Wait for 30 minutes
                }
            }
        }
        stage('Destroy') {
            when {
                expression {
                    return params.autoDestroy
                }
            }
            steps {
                sh """
                    cd terraform
                    terraform destroy -var-file=${params.environment}/${params.environment}.tfvars -var="app_version=${params.version}" -auto-approve
                """
            }
        }
    }

    post {
        always {
            echo 'I will always say Hello again!..'
            deleteDir() // Clean up workspace after the build
        }
        failure {
            echo 'This block of scripts runs only when the pipeline has failed, used generally to send some alerts'
        }
        success {
            echo 'I will say Hello when the pipeline is executed successfully'
        }
    }
}
